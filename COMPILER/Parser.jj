PARSER_BEGIN(Parser)

import java.util.*;

/** ID lister. */
public class Parser { }

PARSER_END(Parser)

SKIP :
{
    " "
    | "\t"
    | "\r"
}

TOKEN :
{ 
    < def: "def" >
    |
    < in: "in" >
    |
    < eq: "=" >
    |
    < end: "end" >
    |
    < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
    |
    < Num: (["0"-"9"]) + >
    |
    < PLUS : "+" >
    |
    < MINUS : "-">
    |
    < MUL : "*">
    |
    < DIV : "/">
    |
    < LPAR : "(" >
    |
    < RPAR : ")" >
    |
    < EL: "\n" >

}

ASTNode Start() :
{
    ASTNode t1;
}
{
    ( t1 = Exp() <EL> { return t1; } | <EOF> { return null; })
}

ASTNode Exp() :
{
    ASTNode t1,t2;
    Token tok;
}
{
    t1 = Term() ( ( tok=<PLUS> | tok=<MINUS> ) t2=Term() { 
    t1 = tok.kind == PLUS ? new ASTAdd(t1,t2) : new ASTSub(t1,t2); } ) *

    { return t1; }

}

ASTNode Term() :
{
    ASTNode t1,t2;
    Token tok;
}
{
    t1=Fact() ( ( tok=<MUL> | tok=<DIV> ) t2=Fact() { 
    t1 = tok.kind == MUL ? new ASTMult(t1, t2) : new ASTDiv(t1, t2); } ) * 
    { return t1; }  
}

ASTNode Fact() :
{
    ASTNode t1;
    Token tok;
}
{
    ( 
        tok=<Id> { t1 = new ASTId(tok.image); }
        | tok=<Num> { t1 = new ASTNum(Integer.parseInt(tok.image)); }
        | <LPAR> t1=Exp() <RPAR>
        | <MINUS> t1=Fact() { t1 = new ASTUminus(t1); }
        | t1=Def()
    )
    { return t1; }  
}

ASTNode Def() :
{
    ASTNode tf;
    Token tok;
    Map<String, ASTNode> m = new HashMap<>();
}
{
    (
        <def> (tok=<Id> <eq> tf=Exp() { m.put(tok.image, tf); })+ <in> tf=Exp() <end>
    )
    { return new ASTDef(m, tf); }
}

