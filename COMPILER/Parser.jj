PARSER_BEGIN(Parser)

import java.util.*;

/** ID lister. */
public class Parser { }

PARSER_END(Parser)

SKIP :
{
    " "
    | "\t"
    | "\r"
}

TOKEN :
{ 
    < _new: "new" >
    |
    < _print: "print" >
    |
    < _if: "if" >
    |
    < _then: "then" >
    |
    < _else: "else" >
    |
    < _while: "while" >
    |
    < _do: "do" >
    |
    < btrue: "true" >
    |
    < bfalse: "false" >
    |
    < def: "def" >
    |
    < in: "in" >
    |
    < eq: "=" >
    |
    < end: "end" >
    |
    < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
    |
    < Num: (["0"-"9"]) + >
    |
    < ASSIGN: ":=" >
    |
    < DEREF: "!" >
    |
    < SEQ: ";" >
    |
    < RELEQ : "==" >
    |
    < RELL : "<" >
    |
    < RELLE : "<=" >
    |
    < RELG : ">" >
    |
    < RELGE : ">=" >
    |
    < BAND : "&&" >
    |
    < BOR : "||" >
    |
    < BNEG : "~" >
    |
    < PLUS : "+" >
    |
    < MINUS : "-">
    |
    < MUL : "*">
    |
    < DIV : "/">
    |
    < LPAR : "(" >
    |
    < RPAR : ")" >
    |
    < EL: "\n" >

}

ASTNode Start():
{ ASTNode n; }
{
    ( n = Expression() <EL> { return n; } | <EOF> { return null; })
}

ASTNode Expression():
{ ASTNode n1, n2; }
{
    n1=TopExpression() ( <SEQ> n2=TopExpression() { n1 = new ASTSeq(n1, n2); } ) *
    { return n1; }
}

ASTNode TopExpression():
{ ASTNode n; }
{
    (
        n=AssignmentExpression()
        | n=NewExpression() /* TODO: Verify with prof */
        | n=PrintExpression()
    )
    { return n; }
}

ASTNode AssignmentExpression():
{ ASTNode n1, n2; }
{
    n1=LogicalOrExpression() ( <ASSIGN> n2=TopExpression() { n1 = new ASTAssign(n1, n2); } ) ?
    { return n1; }
}

ASTNode LogicalOrExpression():
{ ASTNode t1, t2; }
{
    t1=LogicalAndExpression() ( <BOR> t2=LogicalAndExpression() { t1 = new ASTBOr(t1, t2); } ) *
    { return t1; }
}

ASTNode LogicalAndExpression():
{ ASTNode t1, t2; }
{
    t1=RelationalExpression() ( <BAND> t2=RelationalExpression() { t1 = new ASTBAnd(t1, t2); } ) *
    { return t1; }
}

ASTNode RelationalExpression():
{
    ASTNode t1,t2;
    Token t;
}
{
    t1=AdditiveExpression() ( ( t=<RELGE> | t=<RELG> | t=<RELLE> | t=<RELL> | t=<RELEQ> ) t2=AdditiveExpression() { t1 = new ASTRelOp(t1, t2, t.kind); } )?
    { return t1; }
}

ASTNode AdditiveExpression():
{
    ASTNode t1,t2;
    Token tok;
}
{
    t1 = MultiplicativeExpression() ( ( tok=<PLUS> | tok=<MINUS> ) t2=MultiplicativeExpression() { 
                                     t1 = tok.kind == PLUS ? new ASTAdd(t1,t2) : new ASTSub(t1,t2); } ) *
    { return t1; }
}

ASTNode MultiplicativeExpression():
{
    ASTNode t1,t2;
    Token tok;
}
{
    t1=UnaryExpression() ( ( tok=<MUL> | tok=<DIV> ) t2=UnaryExpression() { 
    t1 = tok.kind == MUL ? new ASTMult(t1, t2) : new ASTDiv(t1, t2); } ) * 
    { return t1; }  
}

ASTNode UnaryExpression():
{ ASTNode t1; }
{
    ( 
        t1 = PrimaryExpression()
        | <MINUS> t1=UnaryExpression() { t1 = new ASTUminus(t1); }
        | <BNEG> t1=UnaryExpression()  { t1 = new ASTBNeg(t1); }
        | <DEREF> t1=UnaryExpression()  { t1 = new ASTDeref(t1); }
        | t1 = DefinitionExpression()
        | t1 = SelectionExpression()
        | t1 = IterationExpression()
    )
    { return t1; }  
}

ASTNode PrimaryExpression():
{
    ASTNode t1;
    Token tok;
}
{
    (
        tok=<Num> { t1 = new ASTNum(Integer.parseInt(tok.image)); }
        | tok=<btrue> { t1 = new ASTBool(Boolean.parseBoolean(tok.image)); }
        | tok=<bfalse> { t1 = new ASTBool(Boolean.parseBoolean(tok.image)); }
        | tok=<Id> { t1 = new ASTId(tok.image); }
        | <LPAR> t1=Expression() <RPAR>
    )
    { return t1; }
}

ASTNode PrintExpression():
{ ASTNode n; }
{
    <_print> n=TopExpression()
    { return new ASTPrint(n); }
}

ASTNode NewExpression():
{ ASTNode n; }
{
    <_new> n=TopExpression()
    { return new ASTNew(n); }
}

ASTNode DefinitionExpression():
{
    ASTNode tf;
    Token tok;
    Map<String, ASTNode> m = new HashMap<>();
}
{
    (
        <def> (tok=<Id> <eq> tf=Expression() { m.put(tok.image, tf); })+ <in> tf=Expression() <end>
    )
    { return new ASTDef(m, tf); }
}

ASTNode SelectionExpression():
{ ASTNode t1, t2, t3; }
{
    <_if> t1=Expression() <_then> t2=Expression() <_else> t3=Expression() <end>
    { return new ASTIf(t1, t2, t3); }
}

ASTNode IterationExpression():
{ ASTNode t1, t2; }
{
    <_while> t1=Expression() <_do> t2=Expression() <end>
    { return new ASTWhile(t1, t2); }
}
