PARSER_BEGIN(Parser)

import java.util.*;

/** ID lister. */
public class Parser { }

PARSER_END(Parser)

SKIP :
{
    " "
    | "\t"
    | "\r"
    | "\n"
}

TOKEN :
{ 
    < _new: "new" >
    |
    < _print: "print" >
    |
    < _println: "println" >
    |
    < _if: "if" >
    |
    < _then: "then" >
    |
    < _else: "else" >
    |
    < _while: "while" >
    |
    < _do: "do" >
    |
    < btrue: "true" >
    |
    < bfalse: "false" >
    |
    < def: "def" >
    |
    < in: "in" >
    |
    < eq: "=" >
    |
    < end: "end" >
    |
    < lint: "int" >
    |
    < lbool: "bool" >
    |
    < lref: "ref" >
    |
    < fun: "fun" >
    |
    < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
    |
    < Num: (["0"-"9"]) + >
    |
    < INC_OP: "++" >
    |
    < ARROW: "->" >
    |
    < COLON: ":" >
    |
    < ASSIGN: ":=" >
    |
    < DEREF: "!" >
    |
    < COMMA: "," >
    |
    < SEQ: ";" >
    |
    < RELEQ : "==" >
    |
    < RELNE : "~=" >
    |
    < RELL : "<" >
    |
    < RELLE : "<=" >
    |
    < RELG : ">" >
    |
    < RELGE : ">=" >
    |
    < BAND : "&&" >
    |
    < BOR : "||" >
    |
    < BNEG : "~" >
    |
    < PLUS : "+" >
    |
    < MINUS : "-">
    |
    < MUL : "*">
    |
    < DIV : "/">
    |
    < LPAR : "(" >
    |
    < RPAR : ")" >
    |
    < ENDPROGRAM: ";;" >

}

ASTNode Start():
{ ASTNode n; }
{
    ( n = Expression() <ENDPROGRAM> { return n; } | <EOF> { return null; })
}

ASTNode Expression():
{ ASTNode n1, n2; }
{
    n1=AssignmentExpression() ( <SEQ> n2=AssignmentExpression() { n1 = new ASTSeq(n1, n2); } ) *
    { return n1; }
}

ASTNode AssignmentExpression():
{ ASTNode n1, n2; }
{
    n1=LogicalOrExpression() ( <ASSIGN> n2=LogicalOrExpression() { n1 = new ASTAssign(n1, n2); } ) *
    { return n1; }
}

ASTNode LogicalOrExpression():
{ ASTNode t1, t2; }
{
    t1=LogicalAndExpression() ( <BOR> t2=LogicalAndExpression() { t1 = new ASTBOr(t1, t2); } ) *
    { return t1; }
}

ASTNode LogicalAndExpression():
{ ASTNode t1, t2; }
{
    t1=RelationalExpression() ( <BAND> t2=RelationalExpression() { t1 = new ASTBAnd(t1, t2); } ) *
    { return t1; }
}

ASTNode RelationalExpression():
{
    ASTNode t1,t2;
    Token t;
}
{
    t1=AdditiveExpression() ( ( t=<RELGE> | t=<RELG> | t=<RELLE> | t=<RELL> | t=<RELEQ> | t=<RELNE> ) t2=AdditiveExpression() { t1 = new ASTRelOp(t1, t2, t.kind); } )?
    { return t1; }
}

ASTNode AdditiveExpression():
{
    ASTNode t1,t2;
    Token tok;
}
{
    t1 = MultiplicativeExpression() ( ( tok=<PLUS> | tok=<MINUS> ) t2=MultiplicativeExpression() { 
                                     t1 = tok.kind == PLUS ? new ASTAdd(t1,t2) : new ASTSub(t1,t2); } ) *
    { return t1; }
}

ASTNode MultiplicativeExpression():
{
    ASTNode t1,t2;
    Token tok;
}
{
    t1=UnaryExpression() ( ( tok=<MUL> | tok=<DIV> ) t2=UnaryExpression() { t1 = tok.kind == MUL ? new ASTMult(t1, t2) : new ASTDiv(t1, t2); } ) * 
    { return t1; }  
}

ASTNode UnaryExpression():
{
    ASTNode t1, t2;
    List<ASTNode> l = new LinkedList<>();
}
{
    ( 
        t1 = PrimaryExpression() (<LPAR> ( t2=Expression() { l.add(t2); } (<COMMA> t2=Expression() { l.add(t2); } )*)? <RPAR> { t1 = new ASTApply(t1, l); } ) *

        | <INC_OP> t1=UnaryExpression() { t1 = new ASTPreinc(t1); }
        | <MINUS> t1=UnaryExpression()  { t1 = new ASTUminus(t1); }
        | <BNEG> t1=UnaryExpression()   { t1 = new ASTBNeg(t1); }
        | <DEREF> t1=UnaryExpression()  { t1 = new ASTDeref(t1); }
        | <_new> t1=UnaryExpression()   { t1 = new ASTNew(t1); }
        | (<_print> | <_println>) t1=UnaryExpression() { t1 = new ASTPrint(t1); }

        | t1 = FunctionExpression()
        | t1 = IterationExpression()
        | t1 = DefinitionExpression()
        | t1 = SelectionExpression()

    )
    { return t1; }  
}

ASTNode FunctionExpression():
{
    ASTNode e;
    LType ty = null;
    Token tok = null;
    List<Pair<String, LType>> l = new LinkedList<>();
}
{
    ( <fun> (tok=<Id> <COLON> ty=Type() { l.add(new Pair(tok.image, ty)); } ( <COMMA> tok=<Id> <COLON> ty=Type() { l.add(new Pair(tok.image, ty)); } )* )? <ARROW> e=Expression() <end> )
    { return new ASTFunc(l, e); }
}

ASTNode PrimaryExpression():
{
    ASTNode t1;
    Token tok;
}
{
    (
        tok=<Num>                       { t1 = new ASTNum(Integer.parseInt(tok.image));      }
        | tok=<btrue>                   { t1 = new ASTBool(Boolean.parseBoolean(tok.image)); }
        | tok=<bfalse>                  { t1 = new ASTBool(Boolean.parseBoolean(tok.image)); }
        | tok=<Id>                      { t1 = new ASTId(tok.image);                         }
        | <LPAR> t1=Expression() <RPAR>
    )
    { return t1; }
}

ASTNode DefinitionExpression():
{
    ASTNode tf;
    Token tok;
    LType ty = null;
    List<Triple<String, LType, ASTNode>> m = new LinkedList<>();
}
{
    (
        <def> (tok=<Id> ( <COLON> ty=Type() )? <eq> tf=Expression() { m.add(new Triple<>(tok.image, ty, tf)); })+ <in> tf=Expression() <end>
    )
    { return new ASTDef(m, tf); }
}

ASTNode SelectionExpression():
{ ASTNode t1, t2, t3; }
{
    <_if> t1=Expression() <_then> t2=Expression() <_else> t3=Expression() <end>
    { return new ASTIf(t1, t2, t3); }
}

ASTNode IterationExpression():
{ ASTNode t1, t2; }
{
    <_while> t1=Expression() <_do> t2=Expression() <end>
    { return new ASTWhile(t1, t2); }
}

LType Type():
{
    LType ty;
    List<LType> tyargs = new LinkedList<>();
}
{
        ( <lint>              { ty = new LIntType();   }
        | <lbool>             { ty = new LBoolType();  }
        | <lref> ty=Type()    { ty = new LRefType(ty); }
        | (<LPAR> ( ty=Type() { tyargs.add(ty); } )? ( <COMMA> ty=Type() { tyargs.add(ty); } )* ) <RPAR> ty=Type() { ty = new LFunType(tyargs, ty, true); }
        )
        { return ty; }
}
